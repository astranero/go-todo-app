name: Build and Deploy to GKE

on:
  push:
    branches:
    - "*"
  delete: 
    branches:
    - "*"

env:
  FRONTEND_IMAGE: todo_app
  FRONTEND_SERVICE: todo_app
  BACKEND_IMAGE: todo_backend
  BACKEND_SERVICE: todo_backend
  BRANCH: ${{ github.ref_name }}
  
jobs:
  build-publish-deploy:
    name: Build, Publish and Deploy
    if: github.event == 'push'
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - id: "auth"
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GKE_SA_KEY }}
      
    - name: 'Set up Cloud SDK'
      uses: google-github-actions/setup-gcloud@v2

    - name: 'Use gcloud CLI'
      run: gcloud info

    - name: Docker configuration
      run: gcloud --quiet auth configure-docker
      
    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v2
      with:
        cluster_name: ${{ secrets.GKE_CLUSTER }}
        location: ${{ secrets.GKE_ZONE }}
        project_id: ${{ secrets.PROJECT_ID }}

    # Build the Docker images
    - name: Build Backend Docker image
      run: |-
        docker build \
          --tag "gcr.io/${{ env.GCP_PROJECT }}/${{ env.BACKEND_IMAGE }}:${{ env.BRANCH }}-${{ github.sha }}" \
          "./Project v.1.4/${{ env.BACKEND_IMAGE }}"

    - name: Build Frontend Docker image
      run: |-
        docker build \
          --tag "gcr.io/${{ env.GCP_PROJECT }}/${{ env.FRONTEND_IMAGE }}:${{ env.BRANCH }}-${{ github.sha }}" \
          "./Project v.1.4/${{ env.FRONTEND_IMAGE }}"
  
    # Push the Docker images to Google Container Registry
    - name: Publish Backend Docker image
      run: |-
        docker push "gcr.io/${{ env.GCP_PROJECT }}/${{ env.BACKEND_IMAGE }}:${{ env.BRANCH }}-${{ github.sha }}" 

    - name: Publish Frontend Docker image
      run: |-
        docker push "gcr.io/${{ env.GCP_PROJECT }}/${{ env.FRONTEND_IMAGE }}:${{ env.BRANCH }}-${{ github.sha }}"
      
    - name: Install Kustomize
      run: |-
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        mv kustomize /usr/local/bin/
    
    - name: Deploy
      run: |-
        mkdir kustomize-temp
        cp -r "./Project v.1.4/manifests/." kustomize-temp/
        cd kustomize-temp
        
        NAMESPACE=todo-${GITHUB_REF#refs/heads/}
        if [ "$NAMESPACE" == "main" ]; then
          NAMESPACE=todo-default
        fi
        kubectl create namespace $NAMESPACE || true
        kubectl config set-context --current --namespace=$NAMESPACE
        kustomize edit set namespace $NAMESPACE

        kustomize edit set image ${{ env.FRONTEND_IMAGE }}="gcr.io/${{ env.GCP_PROJECT }}/${{ env.FRONTEND_IMAGE }}:${{ env.BRANCH }}-${{ github.sha }}" 
        kustomize edit set image ${{ env.BACKEND_IMAGE }}="gcr.io/${{ env.GCP_PROJECT }}/${{ env.BACKEND_IMAGE }}:${{ env.BRANCH }}-${{ github.sha }}" 

        kustomize build . | kubectl apply -f -
        
        kubectl rollout status deployment/${{ env.FRONTEND_SERVICE }}
        kubectl rollout status deployment/${{ env.BACKEND_SERVICE }}
        
        # Get the services information
        kubectl get services -o wide

  delete-environment:
    name: Delete env
    if: github.event == 'delete'
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - id: "auth"
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GKE_SA_KEY }}
      
    - name: 'Set up Cloud SDK'
      uses: google-github-actions/setup-gcloud@v2

    - name: 'Use gcloud CLI'
      run: gcloud info

    - name: Docker configuration
      run: gcloud --quiet auth configure-docker
      
    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v2
      with:
        cluster_name: ${{ secrets.GKE_CLUSTER }}
        location: ${{ secrets.GKE_ZONE }}
        project_id: ${{ secrets.PROJECT_ID }}

    - name: Delete namespace
      run: |-
        NAMESPACE=${GITHUB_REF#refs/heads/}
        if [ "$NAMESPACE" != "main" ]; then
          kubectl delete namespace $NAMESPACE
        fi
    
